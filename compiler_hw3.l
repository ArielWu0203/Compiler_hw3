/* Definition section */
%{

#include "y.tab.h"	/* header file generated by bison */
#include <stdbool.h>

#define BUF_SIZE 256

extern YYSTYPE yylval; //YYSTYPE
char buf[BUF_SIZE];
extern int now_level;
extern int now_index;
extern void dump_symbol(int scope);
bool dump = false;
int same_line = 0;
extern int error;
extern bool syntax_error;
extern char ID_name[30];

/* This macro is used to record code line */

#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }

%}

/* Define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
double      {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return ADD; }
"-" 	{ CONCAT; return SUB; }
"*" 	{ CONCAT; return MUL; }
"/" 	{ CONCAT; return DIV; }
"%"     { CONCAT; return MOD; }
"++"    { CONCAT; yylval.string = strdup(yytext); return INC; }
"--"    { CONCAT; yylval.string = strdup(yytext);return DEC; }

 /* Relational */
">"		{ CONCAT; return MT; }
"<"		{ CONCAT; return LT; }
">="	{ CONCAT; return MTE; }
"<="	{ CONCAT; return LTE; }
"=="	{ CONCAT; return EQ; }
"!="	{ CONCAT; return NE; }

 /* Assignment */
"="		{ CONCAT; yylval.string = strdup(yytext); return ASGN; }
"+="	{ CONCAT; yylval.string = strdup(yytext); return ADDASGN; }
"-="	{ CONCAT; yylval.string = strdup(yytext); return SUBASGN; }
"*="	{ CONCAT; yylval.string = strdup(yytext); return MULASGN; }
"/="	{ CONCAT; yylval.string = strdup(yytext); return DIVASGN; }
"%="	{ CONCAT; yylval.string = strdup(yytext); return MODASGN; }

 /* Logical */
"&&"	{ CONCAT; return AND; }
"||"	{ CONCAT; return OR; }
"!"		{ CONCAT; return NOT; }

 /* Delimiters */
"("		{ CONCAT; return LB; }
")"		{ CONCAT; return RB; }
"{"		{ CONCAT; 
          now_level++; 
          if( same_line == 1) {
            same_line++;
          }
          return LCB;
        }
"}"		{ CONCAT; now_level--; dump = true; same_line++; return RCB; }
"["		{ CONCAT; return LSB; }
"]"		{ CONCAT; return RSB; }
","		{ CONCAT; return COMMA; }

 /* Print Keywords */	
"print"		{ CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; return IF; }
"else"		{ CONCAT; return ELSE; }
"for"		{ CONCAT; return FOR; }
"while"		{ CONCAT; return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT; yylval.string = strdup(yytext); return VOID; }
"int"		{ CONCAT; yylval.string = strdup(yytext); return INT; }
"float"  	{ CONCAT; yylval.string = strdup(yytext); return FLOAT; }
"string"  	{ CONCAT; yylval.string = strdup(yytext); return STRING; }
"bool"  	{ CONCAT; yylval.string = strdup(yytext); return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT; yylval.string = strdup(yytext); return TRUE; }
"false"     { CONCAT; yylval.string = strdup(yytext); return FALSE; }

"return"    { CONCAT; return RET; }
"continue"  { CONCAT; return CONT; }
"break"     { CONCAT; return BREAK; }

 /* String Constant */
\"				        { CONCAT; BEGIN STRING_STATE; }
<STRING_STATE>\"		{ CONCAT; BEGIN INITIAL; return STR_CONST; }
<STRING_STATE>[^"]*		{ CONCAT; yylval.string = strdup(yytext); } 

 /* Number Constant */
{integer}	{ CONCAT; yylval.i_val = atoi(yytext); return I_CONST; }
{double}	    { CONCAT; yylval.f_val = atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ CONCAT; BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ CONCAT; }
<COMMENT>\n			{ printf("%d: %s\n",yylineno,buf); bzero(buf,BUF_SIZE); }
<COMMENT>"*"		{ CONCAT; }
<COMMENT>"*/"		{ CONCAT; BEGIN INITIAL;}

 /* C++ type Comment */
\/\/.*	{ CONCAT; }

 /* Variable ID */
{id}       { CONCAT; yylval.string = strdup(yytext); return ID; }

 /* others */

[;]         { CONCAT; return SEMICOLON; }
[\n]        { if(buf[0] != '\0') {
                printf("%d: %s\n",yylineno, buf);
              } else {
                printf("%d:\n",yylineno);
              }
              if( error == 1 ) {
                printf("\n|-----------------------------------------------|\n");
                printf("| Error found in line %d: %s\n", yylineno, buf);
                printf("| Undeclared %s %s","variable",ID_name);
                printf("\n|-----------------------------------------------|\n\n");
                bzero(ID_name,30);
              } else if(error == 2 ){
                printf("\n|-----------------------------------------------|\n");
                printf("| Error found in line %d: %s\n", yylineno, buf);
                printf("| Undeclared %s %s","function",ID_name);
                printf("\n|-----------------------------------------------|\n\n");
                bzero(ID_name,30);
              } else if( error == 3 ){
                printf("\n|-----------------------------------------------|\n");
                printf("| Error found in line %d: %s\n", yylineno, buf);
                printf("| Redeclared %s %s","variable",ID_name);
                printf("\n|-----------------------------------------------|\n\n");
                bzero(ID_name,30);
              } else if( error == 4 ){
                printf("\n|-----------------------------------------------|\n");
                printf("| Error found in line %d: %s\n", yylineno, buf);
                printf("| Redeclared %s %s","function",ID_name);
                printf("\n|-----------------------------------------------|\n\n");
                bzero(ID_name,30);
              }
              if(syntax_error) {
                printf("\n|-----------------------------------------------|\n");
                printf("| Error found in line %d: %s\n", yylineno, buf);
                printf("| %s", "syntax error");
                printf("\n|-----------------------------------------------|\n\n");
                exit(1);
              }
              else if( dump && same_line==2) {
                    dump_symbol(now_level);
              }
              else if(dump) { 
                dump_symbol(1+now_level);
              } 
              
              dump = false;same_line=0;error=0;
              bzero(buf,BUF_SIZE);
            }
[ \t]		{ CONCAT; } /* Ignore */
[^ \t\n] 	{ CONCAT; } /* Ignore other charactor sets */
<<EOF>>     { dump_symbol(0);
              printf("\nTotal lines: %d \n",yylineno);
              return 0;
            }

%%

int yywrap()
{
    return 1;
}
